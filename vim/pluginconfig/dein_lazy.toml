[[plugins]]
repo = 'lambdalisue/fern.vim'
hook_add = '''
"nnoremap <Space>f :<C-u>Fern . -drawer<CR>:set nonumber<CR>
nnoremap <Space>F :<C-u>Fern -drawer<Left><Left><Left><Left><Left><Left><Left><Space><Left>
'''

[[plugins]]
repo = 'lambdalisue/fern-renderer-nerdfont.vim'
on_source = ['fern.vim']
hook_source = '''
let g:fern#renderer = 'nerdfont'
hi Directory ctermfg=39
'''

[[plugins]]
repo = 'machakann/vim-sandwich'
on_event = ['CursorMoved', 'CursorHold']

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
nnoremap <silent> <F5> :<C-u>w<CR>:QuickRun<CR>
'''
hook_source = '''
let g:quickrun_config = {
\	'_': {
\		'runner': 'terminal',
\		'runner/terminal/opener': '10new',
\		'runner/terminal/append': '1'
\	},
\	'tex': {
\		'command': 'latexmk',
\		'args': '-pv-'
\	},
\	'python': {
\		'command': 'python',
\	},
\}
'''

[[plugins]]
repo = 'matze/vim-tex-fold'
on_ft = ['tex']
hook_source = '''
" zi: toggle
let g:tex_fold_use_default_envs = 0
'''


[[plugins]]
repo = 'SirVer/ultisnips'
on_event = 'InsertEnter'
hook_source = '''
let g:UltiSnipsExpandTrigger="<C-j>"

let g:UltiSnipsJumpForwardTrigger="<C-j>"
let g:UltiSnipsJumpBackwardTrigger="<C-k>"
'''

[[plugins]]
repo = 'mattn/vim-maketable'
on_ft = ['markdown']
hook_source='''
vnoremap <silent> t :<C-u>'<,'>MakeTable! ,<CR>
vnoremap <silent> T :<C-u>UnmakeTable ,<CR>
'''


[[plugins]]
repo = 'heavenshell/vim-pydocstring'
build='make install'
on_ft = ['python']
hook_source = '''
let g:pydocstring_formatter = 'google'
nnoremap <silent> <Space>dq :<C-u>Pydocstring<CR>
'''

[[plugins]]
repo = 'mattn/vim-goimports'
on_ft = ['go']


[[plugins]]
repo = 'previm/previm'
on_ft = ['markdown']
hook_source='''
if(g:wsl)
	let g:previm_open_cmd = '/mnt/c/Program\ Files\ \(x86\)/Google/Chrome/Application/chrome.exe'
	let g:previm_wsl_mode = 1
else
	let g:previm_open_cmd = 'firefox'
endif

" :PrevimUpdateAssets 
let g:previm_extra_libraries = [
\	{
\		'name': 'katex',
\		'files': [
\			{
\				'type': 'css',
\				'path': '_/css/extra/texmath.min.css',
\				'url': 'https://cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css',
\			},
\			{
\				'type': 'js',
\				'path': '_/js/extra/katex-auto-render.min.js',
\				'url': 'https://cdn.jsdelivr.net/npm/katex@latest/dist/contrib/auto-render.min.js',
\				'code': [
\					'renderMathInElement(document.body)',
\				]
\			},
\			{
\				'type': 'css',
\				'path': '_/css/extra/katex.min.css',
\				'url': 'https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css',
\				'code': [
\					'renderMathInElement(document.body)',
\				]
\			},
\			{
\				'type': 'js',
\				'path': '_/js/extra/katex.min.js',
\				'url': 'https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.js',
\				'code': [
\					'document.querySelectorAll(''pre code.language-katex'').forEach(elem => {',
\					'  const html = katex.renderToString(elem.innerText, {',
\					'    displayMode: true,',
\					'    output: ''html'',',
\					'    throwOnError: false',
\					'  })',
\					'  const span = document.createElement(''span'')',
\					'  span.innerHTML = html',
\					'  elem.parentNode.replaceWith(span)',
\					'})',
\					'document.querySelectorAll(''.inlkatex'').forEach(elem => {',
\					'  const html = katex.renderToString(elem.innerText, {',
\					'    output: ''html'',',
\					'    throwOnError: false,',
\					'})',
\					'  const span = document.createElement(''span'')',
\					'  span.innerHTML = html',
\					'  elem.replaceWith(span)',
\					'})',
\				],
\			},
\		],
\	},
\	{
\		'name': 'plotly',
\		'files': [
\			{
\				'type': 'js',
\				'path': '_/js/extra/plotly.min.js',
\				'url': 'https://cdn.plot.ly/plotly-2.12.1.min.js',
\				'code': [
\					'document.querySelectorAll(''pre code.language-plotlyjs'').forEach(elem => {',
\					'  const div = document.createElement(''div'')',
\					'  Plotly.newPlot(div, JSON.parse(elem.innerText))',
\					'  elem.parentNode.replaceWith(div)',
\					'})',
\				],
\			},
\		],
\	},
\]
'''

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html']
hook_source='''
let g:user_emmet_leader_key='<C-e>'
'''

[[plugins]]
repo = 'cohama/lexima.vim'
on_event = ['InsertEnter']
hook_source='''
let g:lexima_enable_basic_rules = 1
let g:lexima_enable_newline_rules = 1
let g:lexima_enable_endwise_rules = 0
'''
hook_post_source='''
call lexima#add_rule({'char': '$', 'input_after': '$', 'filetype': 'tex'})
call lexima#add_rule({'char': '$', 'at': '\%#\$', 'leave': 1, 'filetype': 'tex'})
call lexima#add_rule({'char': '<BS>', 'at': '\$\%#\$', 'delete': 1, 'filetype': 'tex'})
" Zenkaku
inoremap 「」 「」<Left>
call lexima#add_rule({'char': '「', 'input_after': '」', 'except': '「」\%#\'})
call lexima#add_rule({'char': '」', 'at': '\%#」', 'leave': 1})
call lexima#add_rule({'char': '<BS>', 'at': '「\%#」', 'delete': 1})
inoremap （） （）<Left>
call lexima#add_rule({'char': '（', 'input_after': '）', 'except': '（）\%#\'})
call lexima#add_rule({'char': '）', 'at': '\%#）', 'leave': 1})
call lexima#add_rule({'char': '<BS>', 'at': '（\%#）', 'delete': 1})
'''

[[plugins]]
repo = 'vim-jp/vimdoc-ja'
hook_add = 'set helplang=ja,en'
