[[plugins]]
repo = "nvim-treesitter/nvim-treesitter"
hook_post_update = 'TSUpdate'
lua_source = """
require('nvim-treesitter.configs').setup{
	ensure_installed = {
		"lua", "vim", "vimdoc", "query",
		"python", "typescript", "json", "jinja",
		"yaml", "toml", "tsx", "terraform"
	},
	lookahead = true,
	highlight = {
		enable = true,
		additional_vim_regex_highlighting = { "python" },
	},
	textobjects = {
		select = {
			enable = true,
			lookahead = true,
			keymaps = {
				["aF"] = "@function.outer",
				["iF"] = "@function.inner",
				["aC"] = "@class.outer",
				["iC"] = "@class.inner"
			},
		},
		move = {
			enable = true,
			goto_next = {
				["]b"] = {query="@block.outer", desc="Next block"},
				["]f"] = {query="@call.outer", desc="Next call"},
				["]F"] = {query="@function.outer", desc="Next function"},
				["]c"] = {query="@class", desc="Next class"},
			},
			goto_previous = {
				["[b"] = {query="@block.outer", desc="Previous block"},
				["[f"] = {query="@call.outer", desc="Previous call"},
				["[F"] = {query="@function.outer", desc="Previous function"},
				["[c"] = {query="@class", desc="Previous class"},
			},
		},
	},
}
"""

[[plugins]]
repo = "nvim-treesitter/nvim-treesitter-textobjects"
depends = ['nvim-treesitter' ]


[[plugins]]
repo = "nvim-lua/plenary.nvim"

[[plugins]]
repo = "MunifTanjim/nui.nvim"

[[plugins]]
repo = "nvim-telescope/telescope-fzf-native.nvim"
build = 'make'
# on_lua = ['telescope.lua']

[[plugins]]
repo = "nvim-telescope/telescope.nvim"
depends = ['plenary.nvim' ]
hook_add = '''
nmap <Space>f [telescope]
nnoremap [telescope]f <CMD>Telescope find_files<CR>
nnoremap [telescope]g <CMD>Telescope git_files<CR>
nnoremap [telescope]c <CMD>Telescope git_commits<CR>
nnoremap [telescope]l <CMD>Telescope current_buffer_fuzzy_find<CR>
nnoremap [telescope]o <CMD>Telescope jumplist<CR>
nnoremap [telescope]r <CMD>Telescope live_grep<CR>
'''
lua_source = '''
local actions = require("telescope.actions")
require("telescope").setup {
	defaults = {
		mappings = {
			i = {
				["<C-j>"] = actions.move_selection_next,
				["<C-k>"] = actions.move_selection_previous,
				["<C-v>"] = actions.select_vertical,
				["<C-s>"] = actions.select_horizontal,
				["<C-e>"] = actions.file_edit,
				["<CR>"] = actions.select_tab,
			},
		},
		layout_strategy = "vertical",
		layout_config = {
			preview_cutoff = 1,
			vertical = {
				width = 0.75,
				height = 0.85,
				mirror = true,
				prompt_position = "top",
				preview_cutoff = 20,
				preview_height = 0.5,
			},
		},
 	},
	extensions = {
		fzf = {
			fuzzy = true,
			override_generic_sorter = true,
			override_file_sorter = true,
			case_mode = "smart_case"
		},
	}
}
require('telescope').load_extension('fzf')
'''

[[plugins]]
repo = "lambdalisue/vim-quickrun-neovim-job"


[[plugins]]
repo = "nvim-tree/nvim-web-devicons"

[[plugins]]
repo = "nvim-lualine/lualine.nvim"
depends = ["nvim-web-devicons"]
lua_source = """
theme = require("lualine.themes.wombat")
theme.inactive.c = {fg = "#c6c6c6", bg = "None"}
theme.normal.c = {fg = "#c6c6c6", bg = "None"}
theme.normal.b = {fg = "#949494", bg = "#262626"}
require('lualine').setup ({
	options = { 
		theme = theme
	},
	sections = {
		lualine_x = {},
		lualine_y = { 'fileformat', 'encoding', 'filetype' },
	},
})
"""

[[plugins]]
repo = "rcarriga/nvim-notify"
hook_add = """
hi NotifyBackground guibg=#000000
nnoremap [telescope]m <CMD>Telescope notify<CR>
"""
lua_source = """
vim.opt.termguicolors = true
require("notify").setup({
	max_width = function() return math.floor(0.6 * vim.api.nvim_win_get_width(0)) end,
	render = "wrapped-compact",
})
vim.notify = require("notify")
"""

[[plugins]]
repo = "folke/noice.nvim"
depends = ["nui.nvim", "nvim-treesitter"]
#on_event = ['VimEnter']
lua_source = '''
require("noice").setup({
	presets = {
		command_palette = false,
		bottom_search = false,
		long_message_to_split = true,
	},
	routes = {
		{
			view = "mini",
			filter = {
				any = {
					{ find = "man.lua: \"no manual entry for *" },
					{ find = "E486: *" },
					{ find = "E349: *" },
					{ kind = "wmsg" },
				},
			},
		},
		{
			view = "notify",
			filter = {
				event = "msg_showmode",
				["not"] = { find = "-- * --" },
			},
		},
	},
	views = {
		cmdline_popup = {
			position = {
				row = -3,
				col = "50%"
			},
			size = {
				width = "90%",
				height = "auto"
			},
			border = { style = "single" },
		},
		popupmenu = {
			relative = "editor",
			position = {
				row = -6,
				col = "50%"
			},
			size = {
				width = "90%",
				height = "auto",
			},
			border = { style = "single", padding = {0, 1} },
			win_options = {
				winhighlight = {Normal = "Normal", FloatBorder = "DiagnosticInfo"},
			},
		},
		mini = {
			timeout = 5000,
			size = { width="auto", height = "auto", max_height=3},
		},
	}
})
'''

[[plugins]]
repo = 'numToStr/Comment.nvim'
lua_source = '''
require("Comment").setup({
	mapping = {
		basic = false,
		extra = false
		}
})
local api = require('Comment.api')
local esc = vim.api.nvim_replace_termcodes( '<ESC>', true, false, true )
if vim.fn.has('win32') == 1 or vim.g.wsl == 1 then
	vim.keymap.set('n', '<C-_>', api.toggle.linewise.current , { desc="Comment" })
	vim.keymap.set('x', '<C-_>', function()
		vim.api.nvim_feedkeys(esc, 'nx', false)
		api.toggle.linewise(vim.fn.visualmode())
	end)
else
	vim.keymap.set('n', '<C-/>', api.toggle.linewise.current , { desc="Comment" })
	vim.keymap.set('x', '<C-/>', function()
		vim.api.nvim_feedkeys(esc, 'nx', false)
		api.toggle.linewise(vim.fn.visualmode())
	end)
end
'''

[[plugins]]
repo = 'CopilotC-Nvim/CopilotChat.nvim'
depends = ['github/copilot.vim']
build = "make tiktoken"
lua_source = '''
local base_prompt = [[
You are capable a programming assistant.
When referencing code, please include the line number first (e.g. L.10-12).
Provide concise, logical answers with references to minimal necessary code.
End each answer with your confidence level (0-100%) and reasons, noting any insufficient input information.
Answers other than the code must be in Japanese.
]]
require("CopilotChat").setup({
    system_prompt = base_prompt,
    model = 'gpt-4o', -- Default model to use, see ':CopilotChatModels' for available models
    agent = 'copilot',
    show_help = "yes",
    prompts = {
        Explain = {
            prompt = "コードを説明してください",
            mapping = '<Space>Ce',
        },
		Review = {
            prompt = 'コードをレビューしてください。',
            mapping = '<Space>Cr',
        },
        Fix = {
            prompt = "このコードには問題があります。バグを修正したコードを表示してください。",
            mapping = '<Space>Cf',
        },
		Docs = {
            prompt = "選択したコードに関するドキュメントコメントを英語で生成してください。",
            mapping = '<Space>Cd',
        },
        Tests = {
            prompt = "選択したコードの詳細なユニットテストを書いてください。",
            mapping = '<Space>Ct',
        },
		CommitMessage = {
			prompt = 'ステージ済みの変更に対して、英語で短いコミットメッセージを生成してください。\n#git:staged',
			mapping = '<Space>Cm',
		},
	}
})
'''
